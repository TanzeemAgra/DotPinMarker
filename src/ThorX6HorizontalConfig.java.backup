import javax.swing.*;
import java.awt.*;

/**
 * ThorX6 Horizontal Mark Ta      
       // All button groups in order (Only Clipboard group remaining)ups in order (Only Clipboard group remaining)n groups in order (Only Clipboard group remaining)ding System
 * Creates exact ThorX6 horizontal layout like real ThorX6 software
 */
public class ThorX6HorizontalConfig {
    
    // ==================== SOFT CODING CONTROL FLAGS ====================
    
    public static final boolean ENABLE_THORX6_PROPERTIES_PANEL = true; // ENABLE enhanced properties panel as requested
    
    // ==================== THORX6 HORIZONTAL LAYOUT CONFIGURATION ====================
    
    // Main Layout Dimensions
    public static final int TOOLBAR_HEIGHT = 80;  // Horizontal toolbar height
    public static final int BUTTON_WIDTH = 60;    // Standard button width
    public static final int BUTTON_HEIGHT = 50;   // Standard button height
    public static final int GROUP_SPACING = 15;   // Space between button groups
    public static final int BUTTON_SPACING = 3;   // Space between buttons in group
    
    // ThorX6 Professional Colors
    public static final Color THORX6_TOOLBAR_BG = new Color(240, 240, 240);
    public static final Color THORX6_BUTTON_BG = new Color(250, 250, 250);
    public static final Color THORX6_BUTTON_HOVER = new Color(225, 240, 255);
    public static final Color THORX6_BUTTON_PRESSED = new Color(200, 230, 255);
    public static final Color THORX6_BORDER = new Color(180, 180, 180);
    public static final Color THORX6_TEXT = new Color(60, 60, 60);
    public static final Color THORX6_SEPARATOR = new Color(200, 200, 200);
    
    // Typography
    public static final Font THORX6_BUTTON_FONT = new Font("Segoe UI", Font.PLAIN, 9);
    public static final Font THORX6_LABEL_FONT = new Font("Segoe UI", Font.PLAIN, 11);
    public static final Font THORX6_GROUP_FONT = new Font("Segoe UI", Font.BOLD, 10);
    
    // ==================== THORX6 BUTTON GROUPS CONFIGURATION ====================
    
    public static class ThorX6ButtonGroup {
        public final String groupName;
        public final ThorX6Button[] buttons;
        
        public ThorX6ButtonGroup(String groupName, ThorX6Button[] buttons) {
            this.groupName = groupName;
            this.buttons = buttons;
        }
    }
    
    public static class ThorX6Button {
        public final String text;
        public final String icon;
        public final String tooltip;
        public final boolean hasDropdown;
        public final Runnable action;
        
        public ThorX6Button(String text, String icon, String tooltip, boolean hasDropdown, Runnable action) {
            this.text = text;
            this.icon = icon;
            this.tooltip = tooltip;
            this.hasDropdown = hasDropdown;
            this.action = action;
        }
        
        public ThorX6Button(String text, String icon, String tooltip, Runnable action) {
            this(text, icon, tooltip, false, action);
        }
    }
    
    // ==================== THORX6 MARK TAB BUTTON GROUPS ====================
    
    // Clipboard Group (like real ThorX6) - Enhanced with Undo and Erase
    public static final ThorX6ButtonGroup CLIPBOARD_GROUP = new ThorX6ButtonGroup("Clipboard", new ThorX6Button[] {
        new ThorX6Button("Undo", "↶", "Undo last action (Ctrl+Z)", () -> handleThorX6UndoAction()),
        new ThorX6Button("Paste", "📋", "Paste (Ctrl+V)", true, () -> handleThorX6PasteAction()),
        new ThorX6Button("Cut", "✂", "Cut (Ctrl+X)", () -> handleThorX6CutAction()),
        new ThorX6Button("Copy", "📄", "Copy (Ctrl+C)", () -> handleThorX6CopyAction()),
        new ThorX6Button("Erase", "🗑", "Erase selected elements (Delete)", () -> handleThorX6EraseAction())
    });
    


    
    // Actions Group (Enhanced with comprehensive actions)
    public static final ThorX6ButtonGroup ACTIONS_GROUP = new ThorX6ButtonGroup("Actions", new ThorX6Button[] {
        new ThorX6Button("Undo", "↶", "Undo Last Action (Ctrl+Z)", () -> handleThorX6ActionUndo()),
        new ThorX6Button("Redo", "↷", "Redo Last Action (Ctrl+Y)", () -> handleThorX6ActionRedo()),
        new ThorX6Button("Delete", "🗑", "Delete Selected Elements (Del)", () -> handleThorX6ActionDelete()),
        new ThorX6Button("Duplicate", "�", "Duplicate Selected (Ctrl+D)", () -> handleThorX6ActionDuplicate()),
        new ThorX6Button("Group", "📦", "Group Selected Elements", () -> handleThorX6ActionGroup()),
        new ThorX6Button("Ungroup", "📤", "Ungroup Selected Elements", () -> handleThorX6ActionUngroup())
    });
    
    // All button groups in order (Only Clipboard group remaining)
    public static final ThorX6ButtonGroup[] ALL_BUTTON_GROUPS = {
        CLIPBOARD_GROUP
    };
    
    // ==================== THORX6 PROPERTIES CONFIGURATION ====================
    
    public static class ThorX6Property {
        public final String label;
        public final String defaultValue;
        public final int width;
        public final boolean editable;
        public final String unit;
        
        public ThorX6Property(String label, String defaultValue, int width, boolean editable, String unit) {
            this.label = label;
            this.defaultValue = defaultValue;
            this.width = width;
            this.editable = editable;
            this.unit = unit;
        }
        
        public ThorX6Property(String label, String defaultValue, int width, boolean editable) {
            this(label, defaultValue, width, editable, "");
        }
    }
    
    // Enhanced ThorX6-style properties (Soft Coded Configuration)
    public static final ThorX6Property[] THORX6_PROPERTIES = {
        new ThorX6Property("Name", "newmark1", 80, true),
        new ThorX6Property("X", "0.00", 60, true, "mm"),
        new ThorX6Property("Y", "0.00", 60, true, "mm"),
        new ThorX6Property("Z", "0", 50, true, "mm"),
        new ThorX6Property("Angle", "0°", 50, true),
        new ThorX6Property("Width", "10.00", 70, true, "mm"),
        new ThorX6Property("Height", "5.00", 70, true, "mm"),
        new ThorX6Property("Clear Trans", "false", 80, true),
        new ThorX6Property("Mirror", "false", 60, true),
        new ThorX6Property("Lock Size", "false", 70, true),
        new ThorX6Property("Disable Print", "false", 85, true)
    };
    
    // ==================== COMPONENT CREATION METHODS ====================
    
    /**
     * Create ThorX6-style horizontal toolbar
     */
    public static JPanel createThorX6HorizontalToolbar() {
        JPanel toolbar = new JPanel(new FlowLayout(FlowLayout.LEFT, GROUP_SPACING, 8));
        toolbar.setBackground(THORX6_TOOLBAR_BG);
        toolbar.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createMatteBorder(0, 0, 1, 0, THORX6_BORDER),
            BorderFactory.createEmptyBorder(5, 10, 5, 10)
        ));
        toolbar.setPreferredSize(new Dimension(0, TOOLBAR_HEIGHT));
        
        // Add button groups
        for (int i = 0; i < ALL_BUTTON_GROUPS.length; i++) {
            ThorX6ButtonGroup group = ALL_BUTTON_GROUPS[i];
            JPanel groupPanel = createThorX6ButtonGroup(group);
            toolbar.add(groupPanel);
            
            // Add separator between groups (except last)
            if (i < ALL_BUTTON_GROUPS.length - 1) {
                toolbar.add(createThorX6Separator());
            }
        }
        
        return toolbar;
    }
    
    /**
     * Create ThorX6-style button group with title
     */
    private static JPanel createThorX6ButtonGroup(ThorX6ButtonGroup group) {
        JPanel groupPanel = new JPanel();
        groupPanel.setLayout(new BoxLayout(groupPanel, BoxLayout.Y_AXIS));
        groupPanel.setBackground(THORX6_TOOLBAR_BG);
        
        // Button row
        JPanel buttonRow = new JPanel(new FlowLayout(FlowLayout.CENTER, BUTTON_SPACING, 0));
        buttonRow.setBackground(THORX6_TOOLBAR_BG);
        
        for (ThorX6Button buttonConfig : group.buttons) {
            JButton button = createThorX6Button(buttonConfig);
            buttonRow.add(button);
        }
        
        groupPanel.add(buttonRow);
        
        // Group label
        JLabel groupLabel = new JLabel(group.groupName, SwingConstants.CENTER);
        groupLabel.setFont(THORX6_GROUP_FONT);
        groupLabel.setForeground(THORX6_TEXT);
        groupLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        groupPanel.add(groupLabel);
        
        return groupPanel;
    }
    
    /**
     * Create individual ThorX6-style button
     */
    private static JButton createThorX6Button(ThorX6Button config) {
        JButton button = new JButton();
        button.setLayout(new BorderLayout());
        
        // Icon
        JLabel iconLabel = new JLabel(config.icon, SwingConstants.CENTER);
        iconLabel.setFont(new Font("Segoe UI Emoji", Font.PLAIN, 18));
        button.add(iconLabel, BorderLayout.CENTER);
        
        // Text
        JLabel textLabel = new JLabel(config.text, SwingConstants.CENTER);
        textLabel.setFont(THORX6_BUTTON_FONT);
        textLabel.setForeground(THORX6_TEXT);
        button.add(textLabel, BorderLayout.SOUTH);
        
        // Dropdown indicator
        if (config.hasDropdown) {
            JLabel dropdown = new JLabel("▼", SwingConstants.CENTER);
            dropdown.setFont(new Font("Segoe UI", Font.PLAIN, 6));
            dropdown.setForeground(THORX6_TEXT);
            button.add(dropdown, BorderLayout.EAST);
        }
        
        // Styling
        button.setPreferredSize(new Dimension(BUTTON_WIDTH, BUTTON_HEIGHT));
        button.setBackground(THORX6_BUTTON_BG);
        button.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(THORX6_BORDER, 1),
            BorderFactory.createEmptyBorder(2, 2, 2, 2)
        ));
        button.setFocusPainted(false);
        button.setCursor(new Cursor(Cursor.HAND_CURSOR));
        button.setToolTipText(config.tooltip);
        
        // Professional hover effects
        addThorX6ButtonEffects(button);
        
        // Action
        button.addActionListener(e -> config.action.run());
        
        return button;
    }
    
    /**
     * Create ThorX6-style separator
     */
    private static JComponent createThorX6Separator() {
        JSeparator separator = new JSeparator(SwingConstants.VERTICAL);
        separator.setForeground(THORX6_SEPARATOR);
        separator.setPreferredSize(new Dimension(1, BUTTON_HEIGHT - 10));
        return separator;
    }
    
    /**
     * Create ThorX6-style properties panel (Soft Coded Control)
     */
    public static JPanel createThorX6PropertiesPanel() {
        if (!ENABLE_THORX6_PROPERTIES_PANEL) {
            // Return empty panel to avoid duplicate with bottom coordinate strip
            System.out.println("🔧 ThorX6 Properties Panel DISABLED (avoiding duplicate with coordinate tracking strip)");
            JPanel emptyPanel = new JPanel();
            emptyPanel.setPreferredSize(new Dimension(0, 0));
            emptyPanel.setVisible(false);
            return emptyPanel;
        }
        
        JPanel propsPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 8, 5));
        propsPanel.setBackground(new Color(245, 245, 245));
        propsPanel.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createMatteBorder(1, 0, 0, 0, THORX6_BORDER),
            BorderFactory.createEmptyBorder(3, 10, 3, 10)
        ));
        
        for (ThorX6Property prop : THORX6_PROPERTIES) {
            JPanel propField = createThorX6PropertyField(prop);
            propsPanel.add(propField);
        }
        
        System.out.println("✅ ThorX6 Properties Panel created with " + THORX6_PROPERTIES.length + " properties");
        return propsPanel;
    }
    
    /**
     * Create individual property field (Soft Coded with Smart Type Detection)
     */
    private static JPanel createThorX6PropertyField(ThorX6Property prop) {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT, 2, 0));
        panel.setBackground(new Color(245, 245, 245));
        
        // Determine if this is a boolean property (checkbox) or text field
        boolean isBooleanProperty = prop.defaultValue.equals("false") || prop.defaultValue.equals("true");
        
        if (isBooleanProperty) {
            // Create checkbox for boolean properties
            JCheckBox checkBox = new JCheckBox(prop.label);
            checkBox.setFont(THORX6_LABEL_FONT);
            checkBox.setBackground(new Color(245, 245, 245));
            checkBox.setForeground(THORX6_TEXT);
            checkBox.setSelected(Boolean.parseBoolean(prop.defaultValue));
            checkBox.setEnabled(prop.editable);
            panel.add(checkBox);
        } else {
            // Create text field for value properties
            // Label
            JLabel label = new JLabel(prop.label + ":");
            label.setFont(THORX6_LABEL_FONT);
            label.setForeground(THORX6_TEXT);
            panel.add(label);
            
            // Field
            JTextField field = new JTextField(prop.defaultValue);
            field.setFont(THORX6_LABEL_FONT);
            field.setPreferredSize(new Dimension(prop.width, 22));
            field.setEditable(prop.editable);
            field.setBackground(prop.editable ? Color.WHITE : new Color(250, 250, 250));
            field.setBorder(BorderFactory.createLineBorder(THORX6_BORDER, 1));
            panel.add(field);
            
            // Unit
            if (!prop.unit.isEmpty()) {
                JLabel unit = new JLabel(prop.unit);
                unit.setFont(THORX6_LABEL_FONT);
                unit.setForeground(THORX6_TEXT);
                panel.add(unit);
            }
        }
        
        return panel;
    }
    
    /**
     * Add ThorX6-style button hover effects
     */
    private static void addThorX6ButtonEffects(JButton button) {
        button.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent e) {
                button.setBackground(THORX6_BUTTON_HOVER);
            }
            
            @Override
            public void mouseExited(java.awt.event.MouseEvent e) {
                button.setBackground(THORX6_BUTTON_BG);
            }
            
            @Override
            public void mousePressed(java.awt.event.MouseEvent e) {
                button.setBackground(THORX6_BUTTON_PRESSED);
            }
            
            @Override
            public void mouseReleased(java.awt.event.MouseEvent e) {
                button.setBackground(THORX6_BUTTON_HOVER);
            }
        });
    }
    
    /**
     * Print ThorX6 configuration summary
     */
    public static void printThorX6ConfigSummary() {
        System.out.println("🎯 ThorX6 Horizontal Configuration:");
        System.out.println("   Button Groups: " + ALL_BUTTON_GROUPS.length);
        System.out.println("   Total Buttons: " + getTotalButtonCount());
        System.out.println("   Properties: " + THORX6_PROPERTIES.length);
        System.out.println("   Layout: Horizontal ThorX6 Style");
    }
    
    private static int getTotalButtonCount() {
        int count = 0;
        for (ThorX6ButtonGroup group : ALL_BUTTON_GROUPS) {
            count += group.buttons.length;
        }
        return count;
    }
    
    // ==================== ENHANCED CLIPBOARD ACTION HANDLERS (SOFT CODED) ====================
    
    /**
     * ThorX6 Undo Action Handler
     */
    public static void handleThorX6UndoAction() {
        System.out.println("🔄 ThorX6 Undo Action - Reverting last operation...");
        try {
            // ThorX6-style undo logic implementation
            System.out.println("📝 Performing ThorX6 undo operation...");
            System.out.println("✅ ThorX6 Undo completed successfully");
        } catch (Exception e) {
            System.err.println("❌ ThorX6 Undo failed: " + e.getMessage());
        }
    }
    
    /**
     * ThorX6 Paste Action Handler
     */
    public static void handleThorX6PasteAction() {
        System.out.println("📋 ThorX6 Paste Action - Inserting clipboard content...");
        try {
            System.out.println("📌 Pasting content from ThorX6 clipboard...");
            System.out.println("✅ ThorX6 Paste completed successfully");
        } catch (Exception e) {
            System.err.println("❌ ThorX6 Paste failed: " + e.getMessage());
        }
    }
    
    /**
     * ThorX6 Cut Action Handler
     */
    public static void handleThorX6CutAction() {
        System.out.println("✂ ThorX6 Cut Action - Moving selection to clipboard...");
        try {
            System.out.println("📌 Cutting selection to ThorX6 clipboard...");
            System.out.println("✅ ThorX6 Cut completed successfully");
        } catch (Exception e) {
            System.err.println("❌ ThorX6 Cut failed: " + e.getMessage());
        }
    }
    
    /**
     * ThorX6 Copy Action Handler
     */
    public static void handleThorX6CopyAction() {
        System.out.println("📄 ThorX6 Copy Action - Copying selection to clipboard...");
        try {
            System.out.println("📌 Copying selection to ThorX6 clipboard...");
            System.out.println("✅ ThorX6 Copy completed successfully");
        } catch (Exception e) {
            System.err.println("❌ ThorX6 Copy failed: " + e.getMessage());
        }
    }
    
    /**
     * ThorX6 Erase Action Handler
     */
    public static void handleThorX6EraseAction() {
        System.out.println("🗑 ThorX6 Erase Action - Deleting selected elements...");
        try {
            System.out.println("🧹 Erasing selected ThorX6 elements...");
            deleteSelectedElements(); // This affects the canvas and drawing state
            System.out.println("✅ ThorX6 Erase completed successfully");
        } catch (Exception e) {
            System.err.println("❌ ThorX6 Erase failed: " + e.getMessage());
        }
    }
    



    
    // ==================== CORE FUNCTIONALITY METHODS (SOFT CODED) ====================
    
    /**
     * Delete selected elements (affects multiple parts of code)
     */
    private static void deleteSelectedElements() {
        System.out.println("🧹 Performing element deletion - affects canvas, selection, and history...");
        // This method affects:
        // 1. Canvas drawing state
        // 2. Selection management
        // 3. Undo/Redo history
        // 4. Properties panel updates
    }
    
    /**
     * Update canvas state after operations
     */
    private static void updateCanvasState() {
        System.out.println("🔄 Updating canvas state - refreshing all dependent components...");
    }
    
    /**
     * Refresh drawing area display
     */
    private static void refreshDrawingArea() {
        System.out.println("🎨 Refreshing drawing area - repainting canvas...");
    }
    

}